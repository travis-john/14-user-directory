{"version":3,"sources":["components/Row.js","components/Col.js","components/Card.js","pages/All.js","components/Container.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["Row","props","className","Col","size","split","map","join","Card","src","image","alt","name","location","email","phone","All","state","results","allResults","all","bind","sortByName","sortByEmail","axios","get","res","this","setState","data","allResponse","console","log","sortedNameResponse","sort","a","b","last","toUpperCase","sortedEmailResponse","htmlFor","id","onClick","user","index","key","picture","large","first","city","Component","Container","fluid","Navbar","href","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1e7af7be.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Row(props) {\n  return <div className={`row flex-row flex-wrap`} {...props} />;\n}\n\nexport default Row;\n","import React from \"react\";\n\nfunction Col(props) {\n  const size = props.size.split(\" \").map(size => \"col-\" + size).join(\" \");\n\n  return <div className={size} {...props} />;\n}\n\nexport default Col;\n","import React from \"react\";\n\nfunction Card(props) {\n  return (\n    <div className='card mb-4'>\n      <img className='card-img-top' src={props.image} alt={props.name} />\n      <div className='card-body'>\n        <h5 className ='card-title'>{props.name}</h5>\n        <ul className=\"list-group list-group-flush\">\n          <li className=\"list-group-item\"><b>Location:</b> {props.location}</li>\n          <li className=\"list-group-item\"><b>Email:</b> {props.email}</li>\n          <li className=\"list-group-item\"><b>Phone:</b> {props.phone}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;\n","import React, {Component} from 'react';\nimport axios from 'axios';\nimport Row from '../components/Row';\nimport Col from '../components/Col';\nimport Card from '../components/Card';\n\nclass All extends Component {\n\n  constructor (props){\n    super(props);\n    this.state = {\n      results:[],\n      allResults:[]\n    };\n    this.all = this.all.bind(this);\n    this.sortByName = this.sortByName.bind(this);\n    this.sortByEmail = this.sortByEmail.bind(this);\n  }\n\n  async componentDidMount() {\n    const res = await axios.get('https://randomuser.me/api/?results=60&nat=us');\n    this.setState({ results: res.data.results });\n    this.setState({allResults: res.data.results});\n  }\n\n  all() {\n    const allResponse = this.state.allResults;\n    console.log(allResponse);\n    this.setState({state: allResponse});\n  }\n\n  sortByName() {\n    const sortedNameResponse = this.state.results.sort(function(a, b) {\n        return (a.name.last.toUpperCase() < b.name.last.toUpperCase()) ? -1 : (a.name.last.toUpperCase() > b.name.last.toUpperCase()) ? 1 : 0;\n      });\n      this.setState({state: sortedNameResponse })\n\n  }\n\n  sortByEmail() {\n    const sortedEmailResponse = this.state.results.sort(function(a, b) {\n      return (a.email.toUpperCase() < b.email.toUpperCase()) ? -1 : (a.email.toUpperCase() > b.email.toUpperCase()) ? 1 : 0;\n    });\n    this.setState({ state: sortedEmailResponse });\n  }\n\n  render() {\n    return (\n      <>\n        <label htmlFor='sort-pills'>Sort by:</label>\n        <ul className=\"nav nav-pills mb-3\" id='sort-pills'>\n          <li className=\"nav-item mr-2\">\n            <button className=\"nav-link active\" onClick={this.all} >All</button>\n          </li>\n          <li className=\"nav-item mr-2\">\n            <button className=\"nav-link\" onClick={this.sortByName}>Name</button>\n          </li>\n          <li className=\"nav-item mr-2\">\n            <button className=\"nav-link\"  onClick={this.sortByEmail}>Email</button>\n          </li>\n        </ul>\n      <Row>\n      {this.state.results.map((user, index) => (\n        <Col size='md-4' key={index}>\n          <Card\n            image={user.picture.large}\n            name={user.name.first + \" \" + user.name.last}\n            location={user.location.city + \", \" + user.location.state}\n            email={user.email}\n            phone={user.phone}\n            />\n        </Col>\n      ))}\n      </ Row>\n      </>\n    );\n  }\n}\n\nexport default All;\n","import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;\n","import React, { Component } from 'react';\nimport Container from './Container';\n// import { Link } from \"react-router-dom\";\n\nclass Navbar extends Component {\n  render() {\n    return (\n      <nav className=\"navbar navbar-expand-lg bg-dark mb-3\">\n        <Container>\n          <a className=\"navbar-brand\" href='/'>User Directory</a>\n        </Container>\n      </nav>\n    );\n  }\n};\n\nexport default Navbar;\n","import React, { Component } from 'react';\nimport All from './pages/All';\nimport Navbar from './components/Navbar';\nimport Container from './components/Container';\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <>\n        <Navbar />\n        <Container>\n          <All></All>\n        </Container>\n      </>\n    );\n  }\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}